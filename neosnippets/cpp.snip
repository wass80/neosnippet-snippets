include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> 

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    } catch (${2:e:xception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     p
options     head
    std::cout << ${0:TARGET} << std::endl;

snippet     prell
options     head
    typedef long long ll;
    typedef long double ld;

snippet     fixed
options     head
    cout << fixed << setprecision(12);

snippet     vecout
    for(auto elm : ${0:TARGET}) cout << elm << " "; cout << endl;

snippet     mod7
options     head
    const ll mod = 1000000007;

snippet     mod9
options     head
    const ll mod = 1000000009;

snippet     d4
options     head
    const vector<int> d4x({1, 0, -1, 0});
    const vector<int> d4y({0, -1, 0, 1});

snippet     d8
options     head
    const vector<int> d4x({1, 1, 0, -1, -1, -1, 0, 1});
    const vector<int> d4y({0, 1, 1, 1, 0, -1, -1, -1});

snippet    faster
    sync_with_stdio(false);
    quick_exit(EXIT_SUCCESS);

snippet     prcn
options     head
    #include <bits/stdc++.h>
    #define int long long
    #define range(i,x,y) i=(x);i<(y);i++
    #define rep(i,n) for(int i=0,i##_len=n;i<i##_len;i++)
    #define all(x) begin(x),end(x)
    #define lim(x,r,l) (r<=x&&x<l)
    typedef long long ll;
    typedef long double ld;
    using namespace std;

    signed main(){
      ${0:TARGET}
    }
